
apply plugin: 'application'
apply plugin: 'distribution'
apply plugin: 'ivy-publish'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'jcreatenodendf'
apply plugin: 'updatebuild'

buildscript { ext {
    bas = [

            version : 'v2.0.2',
    ] }
    dependencies { classpath(
            "com.softwareag.connector:plugin:v2.0.2")

        repositories {

            // Use JCenter for resolving dependencies.
            mavenCentral()
            maven{
                url "${project.buildDependencyURL}/${project.buildDependencyOrganization}/${project.buildDependencyRepoName}"
                credentials {
                    username = project.buildDependencyOrganization//"${project.property('github.organization')}"//project.findProperty("gpr.user") ?: System.getenv("GITHUB_USERNAME")
                    password = project.buildDependencyToken//secretsProperties['GH_SEC_TOKEN']//"e8a7800a8044f4386447b946073e4325435efe7d"//project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
                }
            }
        }
    }
}
//This plugin is required to build code on BAS
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:latest.release"
    }
}
//Declare repository for resolving dependencies
repositories {

    mavenCentral()
    maven{
        url "${project.buildDependencyURL}/${project.buildDependencyOrganization}/${project.buildDependencyRepoName}"
        credentials {
            username = project.buildDependencyOrganization//"${project.property('github.organization')}"//project.findProperty("gpr.user") ?: System.getenv("GITHUB_USERNAME")
            password = project.buildDependencyToken//secretsProperties['GH_SEC_TOKEN']//"e8a7800a8044f4386447b946073e4325435efe7d"//project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['code/source']
        }
        resources {
            srcDirs = ['resources']
        }

    }

}
dependencies {

    //*******************WST Dependencies********************
    //compileOnly 'com.softwareag.mom.is.cs:is-cs:10.3.0.13-v0335'//not available in 10.5 and 10.4
    /*compileOnly 'com.softwareag.mom.is.cs:cs-connector:10.5.0-v0215'
    compileOnly 'com.softwareag.mom.is.cs:cs-client-common:10.5.0-v0215'
    compileOnly 'com.softwareag.mom.is:is-proxy:10.5.0-v0084'
    compileOnly 'com.softwareag.mom.is:is-osgi-profile:10.5.0.5-v0106'
    compileOnly 'com.softwareag.mom.is.cs:cs-core:10.5.0-v0215'
    compileOnly 'com.softwareag.mom.is.cs:cs-upgrade:10.5.0-v0215'
    compileOnly 'com.softwareag.mom.is.cs:cs-cdk:10.5.0-v0215'
    compileOnly 'com.softwareag.mom.is.cs:cs-bundle:10.5.0-v0215'
    compileOnly 'com.softwareag.mom.is.cs:cs-metadata-handler:10.5.0-v0215'
    compileOnly 'com.softwareag.mom.is:is-client:10.5.0.5-v0106'
    compileOnly 'com.softwareag.mom.is:is-server:10.5.0.5-v0106'

    compileOnly 'com.softwareag.mom.is.cs:cs-connector-tooling-api:10.5.0-v0215'
    compileOnly 'com.softwareag.mom.is.cs:cs-connector-tooling-api-impl:10.5.0-v0215'
    compileOnly 'com.softwareag.mom.is.cs:cs-connfactory:10.5.0-v0215'*/

    //***********Extension Jar. Enable only if required****************
    //compileOnly 'com.softwareag.mom.is.cs.shared:cs-shared-ext:10.5.0-v0013'


    //**************External Jars Should be enabled only if required**********
    //compileOnly 'org.apache.commons:commons-codec:1.9.0'
    //compileOnly 'javax.resource:connector-api:1.6.0'
    //compileOnly 'org.apache.commons:commons-io:2.6.0'
    //compileOnly 'org.apache.commons:commons-collections:3.2.2'
    //compileOnly 'org.apache.commons:commons-collections4:4.4.0'

    //*************TC Jars. Should be enabled only if required.**************
    //compileOnly 'net.sf.ehcache:ehcache-ee:2.10.1-v0078'

    //include everything inside jar folder
    compileOnly fileTree(dir: 'code/jars', include: ['*.jar'])
}

task assembleArtifact(type: Zip, group: 'wm') {
    archiveName "${project.providerExtPackageName}.zip"
    destinationDir file("${rootDir}/build/tmpzip")//    ("${buildDir}/libs/")

    from "${rootDir}/packages/${project.providerExtPackageName}/build/ISTemp" //,code,connectors,config,resources"

    description "Assemble archive"
    exclude "build"
    exclude "libs"

}


task copyJavaClass(type: Copy) {
    from "${rootDir}/packages/${project.providerExtPackageName}/build/classes/java/main"
    into "${rootDir}/packages/${project.providerExtPackageName}/code/classes"
}
task copyAllFilesToISTemp(type: Copy){
    from "${rootDir}/packages/${project.providerExtPackageName}/"//"${project.rootDir}"
    into "${rootDir}/packages/${project.providerExtPackageName}/build/ISTemp"
    exclude '.settings', 'bin', 'build/**', '**/*.gradle', '**/*.classpath', '**/*.project', '**/*.java', '**/*.frag', '**/*.bak', 'code/source', 'code/jars/cloudstreams-connector-utils.jar', '.externalToolBuilders', 'classes'

}
task deleteFragFiles(type: Delete) {
    delete fileTree("${project.rootDir}") {
        include '**/*.asd'
    }
}

publishing {
    repositories {
        ivy {
            name = "SNAPSHOT"

            url = project.bas_promotion_url //"http://bas.eur.ad.sag:8081/artifactory/lib-snapshot-local"//
            layout 'maven'
            credentials {
                username = project.hasProperty('build.arm.username') ? project.property('build.arm.username') : 'anonymous'
                password = project.hasProperty('build.arm.password') ? project.property('build.arm.password') : ''
            }
        }
    }
    publications {
        ivy(IvyPublication) {
            organisation = "com.softwareag.mom" +
                    ".is.cs.providersExt.${project.property('bas.provider.name')}"
            module = project.providerExtPackageName
            def buildNumber = System.getenv("BUILD_NUMBER")
            if (buildNumber == null) {
                buildNumber = "1"
            }

            buildNumber = buildNumber.padLeft(4,'0')
            descriptor.status = 'integration'
            revision = "${project.property('build.version.major')}.${project.property('build.version.minor')}.${project.property('build.version.micro')}-v${buildNumber}"
            artifact source: assembleArtifact, extension: 'zip'

        }
    }
}
//Implementing JFrog Artifactory plugin

artifactoryPublish {
    publications(publishing.publications.ivy)
}

//End JFrog Artifactory plugin
compileJava.dependsOn updateBuild
jCreateNodeNdf.dependsOn compileJava
copyJavaClass.dependsOn jCreateNodeNdf
copyAllFilesToISTemp.dependsOn copyJavaClass
assembleArtifact.dependsOn copyAllFilesToISTemp //On github this option should be used
publish.dependsOn assembleArtifact// use this to publish the package individually to BAS
